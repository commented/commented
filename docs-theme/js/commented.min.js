(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var Commented = require('./lib')

document.addEventListener('DOMContentLoaded', function () {
  var node = document.getElementById('commented-main');
  if (!node) {
    console.error('#commented node not found');
    return;
  }
  var options = {
    firebase: node.getAttribute('data-firebase'),
    type: 'firebase',
    auth: node.getAttribute('data-auth').split(' '),
    slug: node.getAttribute('data-slug') || window.location + '',
    inline: node.getAttribute('data-inline'),
    main: node
  }

  // firebase is currently the only supported host
  if (!options.firebase) {
    console.error('Invalid configuration! data-firebase must be specified')
    return;
  }
  Commented(options);
});


},{"./lib":11}],2:[function(require,module,exports){
/** @jsx React.DOM */
var Login = require('./login.jsx')
  , CreateComment = require('./create-comment.jsx')

var AddComment = React.createClass({displayName: 'AddComment',
  propTypes: {
    user: React.PropTypes.object.isRequired,
    autoAdd: React.PropTypes.bool,
  },
  getInitialState: function () {
    return {
      adding: false
    }
  },
  onShow: function () {
    this.setState({adding: true});
  },
  onHide: function () {
    this.setState({adding: false});
  },
  render: function () {
    if (!this.state.adding && !this.props.autoAdd) {
      return React.DOM.div( {className:"add-comment", onClick:this.onShow}, 
        "Add a comment"
      )
    }
    if (!this.props.user) {
      return Login( {db:this.props.db, auth:this.props.auth, onCancel:this.onHide})
    }
    return CreateComment(
      {onHide:this.onHide,
      target:this.props.target,
      db:this.props.db,
      user:this.props.user})
  }
});

module.exports = AddComment

},{"./create-comment.jsx":7,"./login.jsx":12}],3:[function(require,module,exports){
/** @jsx React.DOM */
var AutoTextarea = React.createClass({displayName: 'AutoTextarea',
  componentDidMount: function () {
    var node = this.getDOMNode()
    node.style.height = 'auto'
    node.style.height = node.scrollHeight + 'px'
    node.style.scrollTop = node.scrollHeight
    node.focus()
    node.selectionStart = node.selectionEnd = node.value.length
  },

  render: function () {
    var style
      , node

    if (this.isMounted()) {
      node = this.getDOMNode()
      node.style.height = 'auto'
      node.style.height = node.scrollHeight + 'px'
      style = {
        height: node.scrollHeight + 'px',
        scrollTop: node.scrollHeight
      }
    }
    return this.transferPropsTo(
      React.DOM.textarea( {style:style, className:"auto-textarea"})
    )
  }
});

module.exports = AutoTextarea

},{}],4:[function(require,module,exports){

module.exports = cleanSlug

function cleanSlug(slug) {
  return slug.replace(/[^a-zA-Z0-9]/gm, '-')
}

},{}],5:[function(require,module,exports){
/** @jsx React.DOM */
var format = require('./format')
  , AutoTextarea = require('./auto-textarea.jsx')
  , ReplyLogin = require('./reply-login.jsx')
  , cx = React.addons.classSet

var CommentDisplay = React.createClass({displayName: 'CommentDisplay',
  propTypes: {
    editing: React.PropTypes.bool.isRequired,
    canEdit: React.PropTypes.bool.isRequired,
    data: React.PropTypes.object.isRequired,
    isReply: React.PropTypes.bool,

    onEdit: React.PropTypes.func,
    doneEditing: React.PropTypes.func,
    onRemove: React.PropTypes.func,

    onReply: React.PropTypes.func,
    onUpvote: React.PropTypes.func,
    onDownvote: React.PropTypes.func,
    onClearVote: React.PropTypes.func,
    onFlag: React.PropTypes.func,
  },

  getInitialState: function () {
    return {
      text: this.props.data.text,
    }
  },

  cancelEdit: function () {
    this.setState({text: this.props.data.text})
    this.props.cancelEdit()
  },

  doneEditing: function () {
    this.props.doneEditing(this.state.text)
  },

  onChange: function (e) {
    this.setState({text: e.target.value});
  },

  getVotes: function () {
    var votes = {
      up: false,
      upCount: 0,
      down: false,
      downCount: 0,
      flagged: this.props.data.flags && this.props.data.flags[this.props.userid],
      flagCount: 0
    }

    switch (this.props.data.votes && this.props.data.votes[this.props.userid]) {
      case true:
        votes.up = true; break;
      case false:
        votes.down = true; break;
      default: break;
    }
    for (var id in this.props.data.votes) {
      if (this.props.data.votes[id]) {
        votes.upCount += 1
      } else {
        votes.downCount += 1
      }
    }
    for (var id in this.props.data.flags) {
      if (this.props.data.flags[id]) {
        votes.flagCount += 1
      }
    }
    return votes
  },

  voteButtons: function (votes) {
    if (!this.props.canVote) return

    return React.DOM.div( {className:"commented_buttons"}, 
      React.DOM.span(
        {onClick:this.props.onFlag.bind(null, !votes.flagged),
        className:cx({
          "button commented_flag": true,
          "commented_flag--active": votes.flagged
        })}, 
        React.DOM.i( {className:"fa fa-flag"})
      ),
      React.DOM.span(
        {onClick:votes.down ? this.props.onClearVote : this.props.onDownvote,
        className:cx({
          "button commented_down": true,
          "commented_down--shown shown": !!votes.downCount,
          "commented_down--active active": votes.down
        })}, 
        React.DOM.span( {className:"count"}, votes.downCount),
        React.DOM.i( {className:"fa fa-thumbs-o-down"})
      ),
      React.DOM.span(
        {onClick:votes.up ? this.props.onClearVote : this.props.onUpvote,
        className:cx({
          "button commented_up": true,
          "commented_up--shown shown": !!votes.upCount,
          "commented_up--active active": votes.up
        })}, 
        React.DOM.span( {className:"count"}, votes.upCount),
        React.DOM.i( {className:"fa fa-thumbs-o-up"})
      ),
      !this.props.isReply && React.DOM.span( {onClick:this.props.onReply, className:"commented_reply"}, "reply")
    );
  },

  editButtons: function () {
    return React.DOM.div( {className:"commented_buttons"}, 
      React.DOM.span( {onClick:this.doneEditing, className:"commented_done-edit button"}, 
        this.props.creating ? 'post' : 'save'
      ),
      React.DOM.span( {onClick:this.cancelEdit, className:"commented_remove button"}, 
        "cancel"
      )
    )
  },

  replyLogin: function () {
    if (this.props.isReply) return false
    return React.DOM.div( {className:"commented_buttons"}, 
      ReplyLogin(
        {db:this.props.db,
        auth:this.props.db.options.auth,
        onCancel:this.props.cancelReply,
        onReply:this.props.onReply})
    )
  },

  buttons: function (votes) {
    if (!this.props.userid) {
      return this.replyLogin()
    }
    if (!this.props.canEdit) {
      return this.voteButtons(votes)
    }
    if (this.props.editing) {
      return this.editButtons()
    }
    return React.DOM.div( {className:"commented_buttons"}, 
      React.DOM.span( {onClick:this.props.onEdit, className:"commented_edit button"}, 
        React.DOM.i( {className:"fa fa-pencil"})
      ),
      React.DOM.span( {onClick:this.props.onRemove, className:"commented_remove button"}, 
        React.DOM.i( {className:"fa fa-times"})
      ),
      !this.props.isReply && React.DOM.span( {onClick:this.props.onReply, className:"commented_reply"}, "reply")
    );
  },

  body: function () {
    if (!this.props.editing) {
      return format(this.props.data.text, "text")
    }
    return AutoTextarea(
      {placeholder:"Type your comment here",
      onChange:this.onChange,
      value:this.state.text})
  },

  render: function () {
    var comment = this.props.data
      , cls = "commented_comment"
    if (this.props.editing) {
      cls += ' commented_comment--editing'
    }
    if (this.props.canEdit) {
      cls += ' commented_comment--mine'
    }
    if (this.props.isReply) {
      cls += ' commented_comment--reply'
    }
    if (this.props.hasReplies) {
      cls += ' commented_comment--has-replies'
    }

    var votes = this.getVotes()
    if (votes.flagCount > 2 && this.props.userid !== this.props.data.userid) {
      return React.DOM.div( {className:cls + " commented_comment--flagged"}, 
        React.DOM.span( {className:"commented_pic fa-stack fa-lg"}, 
          React.DOM.i( {className:"fa fa-circle fa-stack-2x"}),
          React.DOM.i( {className:"fa fa-flag fa-stack-1x fa-inverse"})
        ),
        React.DOM.span( {className:"display-name"}, 
          "flagged comment hidden"
        )
      )
    }

    return React.DOM.div( {className:cls}, 
      React.DOM.img( {className:"commented_pic", src:comment.picture}),
      React.DOM.div( {className:"right"}, 
        this.buttons(votes),
        React.DOM.strong( {className:"display-name"}, comment.displayName),
        comment.created && // TODO have this time auto-update
          React.DOM.span( {className:"display-time"}, moment(comment.created).fromNow()),
        this.props.parentDeleted &&
          React.DOM.span( {className:"parent-deleted"}, "in reply to a deleted comment"),
        this.props.creating &&
          React.DOM.button( {className:"commented_logout", onClick:this.props.onLogout}, "logout"),
        this.body()
      )
    );
  }
});

module.exports = CommentDisplay

},{"./auto-textarea.jsx":3,"./format":10,"./reply-login.jsx":15}],6:[function(require,module,exports){
/** @jsx React.DOM */
var CommentDisplay = require('./comment-display.jsx')

var Comment = React.createClass({displayName: 'Comment',
  propTypes: {
    data: React.PropTypes.object.isRequired,
    canEdit: React.PropTypes.bool.isRequired,
    userid: React.PropTypes.string.isRequired,
    db: React.PropTypes.object,
  },

  getInitialState: function () {
    return {
      editing: false,
      replying: false,
    }
  },

  onRemove: function () {
    this.props.db.removeComment(this.props.data._id)
  },

  onEdit: function () {
    this.setState({editing: true})
  },

  onReply: function () {
    if (this.props.isReply) return
    this.setState({editing: false, replying: true});
  },

  onClearVote: function () {
    this.props.db.clearVote(this.props.data._id, this.props.userid)
  },

  onDownvote: function (erase) {
    this.props.db.downVote(this.props.data._id, this.props.userid)
  },

  onUpvote: function () {
    this.props.db.upVote(this.props.data._id, this.props.userid)
  },

  onFlag: function (flag) {
    this.props.db.flag(this.props.data._id, this.props.userid, flag)
  },

  cancelEdit: function () {
    this.setState({editing: false})
  },

  doneEditing: function (text) {
    if (!this.state.editing) return
    if (!text) return
    this.props.db.editComment(this.props.data._id, text)
    this.setState({editing: false})
  },

  doneReplying: function (text) {
    if (!this.state.replying) return
    if (!text) return
    this.props.db.addComment(text, "reply:" + this.props.data._id, '')
    this.setState({replying: false})
  },

  cancelReply: function () {
    this.setState({replying: false})
  },

  renderReplies: function () {
    var replies = this.props.replies
    if (!replies.length && !this.state.replying) {
      return false
    }
    var user = this.props.user
    return React.DOM.div( {className:"commented_replies"}, 
      replies.map(function (comment) {
        return Comment({
          key: comment._id,
          isReply: true,
          replies: [],
          canEdit: user && user.uid == comment.userid,
          canVote: !!user,
          userid: user && user.uid,
          data: comment,
          user: user,
          db: this.props.db,
        })
      }.bind(this)),
      this.state.replying && user && CommentDisplay({
        editing: true,
        canEdit: true,
        canVote: false,
        data: {
          picture: this.props.user.picture,
          displayName: this.props.user.displayName,
          text: ''
        },
        onLogout: this.onLogout,
        userid: this.props.userid,
        isReply: true,
        creating: true,

        cancelEdit: this.cancelReply,
        doneEditing: this.doneReplying,
        onRemove: this.cancelReply
      })
    )
  },

  onLogout: function () {
    this.setState({replying: false, editing: false})
    this.props.db.logout()
  },

  render: function () {
    return React.DOM.div( {className:"commented_one"}, 
      CommentDisplay({
        editing: this.state.editing,
        canEdit: this.props.canEdit,
        canVote: this.props.canVote,
        data: this.props.data,
        db: this.props.db,
        isReply: this.props.isReply,
        hasReplies: (this.props.userid && this.state.replying) || this.props.replies && this.props.replies.length,
        userid: this.props.userid,
        parentDeleted: this.props.parentDeleted,

        onEdit: this.onEdit,
        onFlag: this.onFlag,
        onReply: !this.props.isReply && this.onReply,
        cancelReply: this.cancelReply,
        onLogout: this.onLogout,
        onRemove: this.onRemove,
        onUpvote: this.onUpvote,
        onDownvote: this.onDownvote,
        onClearVote: this.onClearVote,
        doneEditing: this.doneEditing,
        cancelEdit: this.cancelEdit,
      }),
      this.renderReplies()
    )
  }
});

module.exports = Comment;

},{"./comment-display.jsx":5}],7:[function(require,module,exports){
/** @jsx React.DOM */
var AutoTextarea = require('./auto-textarea.jsx')
var CommentDisplay = require('./comment-display.jsx')

var CreateComment = React.createClass({displayName: 'CreateComment',
  propTypes: {
    onHide: React.PropTypes.func.isRequired,
    target: React.PropTypes.string.isRequired,
    db: React.PropTypes.object.isRequired,
    user: React.PropTypes.object.isRequired
  },
  getInitialState: function () {
    return {
      text: ''
    }
  },

  _onSubmit: function (text) {
    if (!text) return
    this.props.db.addComment(text, this.props.target, false)
    this.props.onHide()
  },

  render: function () {
    return CommentDisplay({
      canEdit: true,
      editing: true,
      creating: true,
      data: {
        picture: this.props.user.picture,
        displayName: this.props.user.displayName,
        text: '',
      },
      userid: this.props.user.uid,

      onLogout: this.props.db.logout.bind(this.props.db),
      cancelEdit: this.props.onHide,
      doneEditing: this._onSubmit,
      onRemove: this.props.onHide
    })
  }
});

module.exports = CreateComment


},{"./auto-textarea.jsx":3,"./comment-display.jsx":5}],8:[function(require,module,exports){

module.exports = DBFirebase

function DBFirebase(options) {
  this.db = new Firebase('https://' + options.firebase + '.firebaseio.com/comments/' + options.slug);
  var onValue
  this.db.on('value', onValue = function () {
    this.db.off('value', onValue)
    this.loaded = true
  }.bind(this));
  this.user = null
  this.options = options

  this._auth = new FirebaseSimpleLogin(this.db, this._onLogin.bind(this));
  this.liHanders = []
}

DBFirebase.prototype = {

  // normal edits

  addComment: function (text, target, quote) {
    if (!this.user) {
      return console.error("Not logged in");
    }
    this.db.push({
      created: Date.now(),
      displayName: this.user.displayName,
      picture: this.user.picture,
      userid: this.user.uid,
      text: text,
      target: target,
      quote: quote
    })
  },

  editComment: function (id, text) {
    if (!this.user) {
      return console.error("Not logged in");
    }
    this.db.child(id).update({text: text})
  },

  removeComment: function (id) {
    if (!this.user) {
      return console.error("Not logged in");
    }
    this.db.child(id).remove()
  },

  // voting!!

  flag: function (id, uid, flag) {
    this.db.child(id).child('flags').child(uid).set(flag)
  },

  downVote: function (id, uid) {
    this.db.child(id).child('votes').child(uid).set(false)
  },

  clearVote: function (id, uid) {
    this.db.child(id).child('votes').child(uid).remove()
  },

  upVote: function (id, uid) {
    this.db.child(id).child('votes').child(uid).set(true)
  },

  login: function (type) {
    this._auth.login(type, {
      rememberMe: true
    })
  },

  _onLogin: function (err, user) {
    if (err || !user) {
      return this.fireLoggedin(null)
    }
    user.picture = (user.thirdPartyUserData.profile_image_url || // twitter
                    user.thirdPartyUserData.picture ||  // google
                    user.thirdPartyUserData.avatar_url) // github
    // facebook
    if (user.picture && user.picture.data) {
      user.picture = user.picture.data.url
    }
    this.user = user
    this.fireLoggedin(user)
  },

  fireLoggedin: function (user) {
    this.liHanders.forEach(function (fn) {
      fn(user)
    })
  },

  logout: function () {
    this._auth.logout()
  },

  onLogin: function (cb) {
    this.liHanders.push(cb)
  },

  offLogin: function (cb) {
    var i = this.liHanders.indexOf(cb)
    if (i === -1) return
    this.liHanders.splice(i, 1)
  },

  onceLoaded: function (done) {
    var onValue
    this.db.on('value', onValue = function () {
      done()
      this.db.off('value', onValue)
    }.bind(this))
  },

  // register event listeners
  onAdd: function (cb) {
    this.db.on('child_added', function (snapshot) {
      var val = snapshot.val()
      val._id = snapshot.name()
      cb(val);
    });
  },
  onChange: function (cb) {
    this.db.on('child_changed', function (snapshot) {
      var val = snapshot.val()
      val._id = snapshot.name()
      cb(val)
    });
  },
  onRemove: function (cb) {
    this.db.on('child_removed', function (snapshot) {
      cb(snapshot.name());
    });
  },
}

},{}],9:[function(require,module,exports){

var DBFirebase = require('./db-firebase');
// var DBHoodie = require('./db-hoodie');

module.exports = function (options) {
  switch (options.type) {
    /* Not ready yet
    case "hoodie":
      return new DBHoodie(options);*/
    case "firebase":
      return new DBFirebase(options);
    default:
      console.error("Invalid backend specified", options.type, options);
  }
}


},{"./db-firebase":8}],10:[function(require,module,exports){

if (window.marked) {
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: true,
    pedantic: false,
    sanitize: false,
    smartLists: true,
    smartypants: true,
  })
  module.exports = function (text, cls) {
    return React.DOM.div({
      className: cls,
      dangerouslySetInnerHTML: {
        __html: marked(text)
      }
    });
  }
} else {
  module.exports = function (x, cls) {
    return React.DOM.div({className: cls}, x)
  }
}


},{}],11:[function(require,module,exports){

var cleanSlug = require('./clean-slug.js')
  , getDb = require('./db')

  // , InlineComments = require('./inline-comments.jsx')
  , MainComments = require('./main-comments.jsx')

module.exports = function (options) {
  options.slug = cleanSlug(options.slug)

  var db = window.db = getDb(options)
  if (!db) return console.error('Failed to initialize db')

  var nodes
  if (options.inline && false) {
    var body = document.querySelector(options.inline)
    body.classList.add('commented_inline-body')
    nodes = body.querySelectorAll(options.inline + ' p')
    nodes.forEach(function (node) {
      React.renderComponent(InlineComments({
        auth: auth,
        db: db
      }), node);
    });
  }

  React.renderComponent(MainComments({
    auth: options.auth,
    db: db
  }), options.main);

  // create the main component, then create a sidebar component
}


},{"./clean-slug.js":4,"./db":9,"./main-comments.jsx":13}],12:[function(require,module,exports){
/** @jsx React.DOM */
var ICONS = {
  facebook: 'facebook',
  twitter: 'twitter',
  google: 'google',
  github: 'github'
}

var Login = React.createClass({displayName: 'Login',
  propTypes: {
    db: React.PropTypes.object.isRequired,
    auth: React.PropTypes.array.isRequired,
    onLogin: React.PropTypes.func.isRequired,
    onCancel: React.PropTypes.func.isRequired
  },

  getInitialState: function () {
    return {
      loading: false
    }
  },

  componentDidMount: function () {
    this.props.db.onLogin(this._onLogin)
  },
  componentWillUnmount: function () {
    this.props.db.offLogin(this._onLogin)
  },

  _onLogin: function () {
    this.setState({loading: false})
  },

  onClick: function (type) {
    this.setState({loading: type})
    this.props.db.login(type)
  },

  render: function () {
    if (this.state.loading) {
      return React.DOM.div( {className:"commented_login--loading commented_login"}, 
        "Connecting to ", this.state.loading,
        React.DOM.i( {className:"fa fa-spin fa-spinner"})
      )
    }

    return React.DOM.div( {className:"commented_login"}, 
      this.props.auth.map(function (type) {
        var icon = ICONS[type]
          , cls = "commented_login-type"
        cls += ' commented_login-type--' + type
        return React.DOM.button( {key:type, className:cls, onClick:this.onClick.bind(this, type)}, 
          React.DOM.span( {className:"commented_pic fa-stack fa-lg"}, 
            React.DOM.i( {className:"fa fa-circle fa-stack-2x"}),
            React.DOM.i( {className:"fa fa-" + icon + " fa-stack-1x fa-inverse"})
          )
        );
      }.bind(this)),
      React.DOM.button( {className:"commented_login-type commente_login-type--cancel",
        onClick:this.props.onCancel}, "×"
      )
    );
  }
});

module.exports = Login

},{}],13:[function(require,module,exports){
/** @jsx React.DOM */
var mixing = require('./mixin')
  , Comment = require('./comment.jsx')
  , ShowAller = require('./show-aller.jsx')
  , AddComment = require('./add-comment.jsx')

var MainComments = React.createClass({displayName: 'MainComments',
  mixins: [mixing],
  propTypes: {
    db: React.PropTypes.object.isRequired,
    auth: React.PropTypes.array.isRequired
  },
  getInitialState: function () {
    return {
      showAll: false,
      loading: !this.props.db.loaded
    }
  },

  componentDidMount: function () {
    this.props.db.onLogin(this._onLogin)
    if (!this.props.db.loaded) {
      this.props.db.onceLoaded(this._onLoaded)
    }
  },

  componentWillUnmount: function () {
    this.props.db.offLogin(this._onLogin)
  },

  _onLoaded: function () {
    this.setState({loading: false})
  },

  _onChangeShow: function (which) {
    this.setState({
      showAll: which
    })
  },

  organizeComments: function () {
    var ids = Object.keys(this.state.comments)
      , comments = this.state.comments
      , showAll = this.state.showAll
      , inlines = 0
      , replies = []
      , map = {}
      , list = []

    ids.forEach(function (id) {
      if (!comments[id]) return
      var item = {
        comment: comments[id],
        replies: []
      }
      var target = comments[id].target
      map[id] = item
      if (target === 'main') {
        list.push(item)
      } else if (target.indexOf('inline:') === 0) {
        inlines += 1
        if (showAll) list.push(item)
      } else if (target.indexOf('reply:') === 0) {
        replies.push(comments[id])
      }
    })

    replies.forEach(function (comment) {
      var parent = comment.target.slice('reply:'.length)
      if (!map[parent]) {
        // this is in reply to a comment that was deleted...
        list.push({comment: comment, parentDeleted: true, replies: []})
        return
      }
      map[parent].replies.push(comment)
    });

    return {
      list: list,
      inlines: inlines
    }
  },

  _onLogin: function (user) {
    this.setState({user: user})
  },

  renderComments: function () {
    if (!Object.keys(this.state.comments).length) {
      if (this.state.loading) {
        return React.DOM.span(null, React.DOM.i( {className:"fa fa-spin fa-spinner"}), " Loading...")
      }
      return null
    }

    var organized = this.organizeComments()
    var user = this.state.user
    var db = this.props.db

    var comments = organized.list.map(function (item) {
      return Comment({
        key: item.comment._id,
        replies: item.replies,
        parentDeleted: item.parentDeleted,
        canEdit: user && user.uid == item.comment.userid,
        canVote: !!user,
        userid: user && user.uid,
        data: item.comment,
        user: user,
        db: db,
      })
    }.bind(this))

    return React.DOM.div( {className:"commented_comments"}, 
      organized.inlines ? ShowAller({
        count: organized.inlines,
        showAll: this.state.showAll,
        onChange: this._onChangeShow
      }) : false,
      comments
    );
  },

  render: function () {
    return React.DOM.div( {className:"commented_main"}, 
      this.renderComments(),
      React.DOM.div( {className:"commented_add"}, 
        AddComment(
          {target:"main",
          user:this.state.user,
          auth:this.props.auth,
          db:this.props.db})
      ),
      React.DOM.div( {className:"commented_attribution"}, 
        "Comments powered by ", React.DOM.a( {target:"_blank", href:"http://commented.github.io"}, "//commented")
      )
    );
  }
});

module.exports = MainComments;

},{"./add-comment.jsx":2,"./comment.jsx":6,"./mixin":14,"./show-aller.jsx":16}],14:[function(require,module,exports){

var up = React.addons.update

module.exports = {
  propTypes: {
    db: React.PropTypes.object.isRequired,
    auth: React.PropTypes.array.isRequired
  },

  getInitialState: function () {
    return {
      comments: {},
      user: null
    }
  },

  componentDidMount: function () {
    this.props.db.onAdd(this._onAdded);
    this.props.db.onRemove(this._onRemoved);
    this.props.db.onChange(this._onChanged);
    this.setState({user: this.props.db.user});
  },

  // firebase callbacks
  _onAdded: function (comment) {
    if (this.props.target && comment.target !== this.props.target) {
      return
    }
    var update = {}
    update[comment._id] = {$set: comment}
    this.setState({
        comments: up(this.state.comments, update)
    })
  },

  _onChanged: function (comment) {
    var update = {}
    update[comment._id] = {$set: comment}
    this.setState({
        comments: up(this.state.comments, update)
    })
  },

  _onRemoved: function (id) {
    var update = {}
    update[id] = {$set: null}
    this.setState({
        comments: up(this.state.comments, update)
    })
  },
}

},{}],15:[function(require,module,exports){
/** @jsx React.DOM */
var Login = require('./login.jsx')

var ReplyLogin = React.createClass({displayName: 'ReplyLogin',
  propTypes: {
    db: React.PropTypes.object.isRequired,
    auth: React.PropTypes.array.isRequired,
    onCancel: React.PropTypes.func,
    onReply: React.PropTypes.func
  },
  getInitialState: function () {
    return {
      open: false
    }
  },
  onOpen: function () {
    this.props.onReply()
    this.setState({open: true})
  },
  onCancel: function () {
    this.props.onCancel()
    this.setState({open: false})
  },
  render: function () {
    return React.DOM.span( {className:"commented_reply-login"}, 
      this.state.open ?
        Login(
          {db:this.props.db,
          auth:this.props.auth,
          onLogin:this.props.onReply,
          onCancel:this.onCancel}
        ) :
        React.DOM.span( {onClick:this.onOpen, className:"commented_reply"}, "reply")
      
    )
  },
})

module.exports = ReplyLogin

},{"./login.jsx":12}],16:[function(require,module,exports){
/** @jsx React.DOM */
var ShowAller = React.createClass({displayName: 'ShowAller',
  propTypes: {
    skipped: React.PropTypes.number
  },
  render: function () {
    var show = this.props.showAll
    return React.DOM.div( {className:"commented_show-aller"}, 
      React.DOM.button(
          {className:"commented_show-aller_btn",
          onClick:this.props.onChange.bind(null, !show)}, 
        show ? 'Hide' : 'Show', " ", this.props.count, " side comments"
      )
    );
  }
});

module.exports = ShowAller


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
